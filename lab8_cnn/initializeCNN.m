function net = initializeCNN()
f=1/100 ;
net.layers = {} ;
%First Convolutional Layer: input size = 128,128,1,64
net.layers{end+1} = struct('type', 'conv', ...
                           'filters', f*randn(5,5,1,10, 'single'), ...
                           'biases', zeros(1, 10, 'single'), ...
                           'stride', 1, ...
                           'pad', 0) ;
%First Pooling Layer: input size = 124,124,10,64
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [2 2], ...
                           'stride', 2, ...
                           'pad', 0) ;
%Second Convolutional Layer: input size = 62,62,10,64
net.layers{end+1} = struct('type', 'conv', ...
                           'filters', f*randn(5,5,10,25, 'single'),...
                           'biases', zeros(1,25,'single'), ...
                           'stride', 2, ...
                           'pad', 0) ;
%Second Pooling Layer: input size = 29,29,25,64
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [4 4], ...
                           'stride', 4, ...
                           'pad', 0) ;
%Third Convolutional Layer: input size = 7,7,25,64
net.layers{end+1} = struct('type', 'conv', ...
                           'filters', f*randn(4,4,25,100, 'single'),...
                           'biases', zeros(1,100,'single'), ...
                           'stride', 1, ...
                           'pad', 0) ;
%ReLU Layer: input size = 4,4,100,64
net.layers{end+1} = struct('type', 'relu') ;
%Fourth Convolutional Layer: input size = 4,4,100,64
net.layers{end+1} = struct('type', 'conv', ...
                           'filters', f*randn(2,2,100,25, 'single'),...
                           'biases', zeros(1,25,'single'), ...
                           'stride', 1, ...
                           'pad', 0) ;
%SoftmaxLoss Layer: input size = 3,3,25,64
net.layers{end+1} = struct('type', 'softmaxloss') ;
